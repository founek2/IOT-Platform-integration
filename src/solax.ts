import mqtt from 'mqtt';

function runClient() {
    const client = mqtt.connect('mqtt://mqtt001.solaxcloud.com', {
        username: process.env.REGISTRATION_NUMBER,
        password: process.env.SOLAX_MQTT_PASSwORD,
        port: 2901,
    });

    client.on('connect', function () {
        console.log('connected');
        client.subscribe('loc/tsp/SYSGQEJMDS', function (err) {
            if (err) {
                console.error(err);
            }
        });
    });

    client.on('message', function (topic, message) {
        // message is Buffer
        console.log(message.toString('hex'));

        // client.end();
    });
}
runClient();

// SYSGQEJMDS H34A10I8219546X
// 6S58EI913AC297 6S58EI913AC297 6S58 FI712AC353
// 6S58EI913AC297 6S58EI913AC297 6S58 FI712AC353
// 6S58EI913AC297 6S58EI913AC297 6S58 FI712AC353
// 6S58EI913AC297 6S58EI913AC297 6S58 FI712AC353
// 6S58EI913AC297 6S58EI913AC297 6S58 FI712AC353 _'3.003.01{|mQ

// const data = Buffer.from(
//     '2424a1020101090e5359534751454a4d44530000000000004833344131304938323139353436000002015802870971092309230023002400550012006300ca00280b330e19001700dc02500388138813871302000000000000000000000000000000000000000000000000000000000000000000000000000000145f12022305780936001c0501002d00ca0000010d240c04021764000000250000000000000000000000000000000000000000000000000000000b0100001d00020000000000750000008300000003001a003401000038000000000000000a0000002331000000000000730300000000000000000000000000000000000001002700010014002d000001440a0807be005e01950082002200220001005b040001252524240000000000000000230d1b0d1d8c0000365335384549393133414332393736533538454939313341433239373653353846493731324143333533000000000000000000000000000000000000000000000000000000000308020d020103060000145fe3030332e30317b00000000007c006d00000000006623',
//     'hex'
// );
/**
 * $$!     SYSGQEJMDSH34A10I8219546X       q       #       ##$UcJ(
 * $                                                              3_#x     6-J
 *  d%
 *    u48
 * #1s'-D
 * >^""[%%$$#
 * _'3.003.01{|mf#58EI913AC2976S58FI712AC353
 */
// 2023-02-04 12:01:53
const data = Buffer.from(
    /// ----------------------------------------------------
    '2424a1020101090e5359534751454a4d445300000000000048333441313049383231393534360000020158027c0942095f090d000d000d00650081007a006001830bd21054004000be09d20a8b1387138713020000000000000000000000000000000000000000000000000000000000000000000000000000008a614e075612b209bc003a1201002c00600100010e010d04021764000000200000000000000000000000000000000000000000000000000000000d0100001f000200000000007500000089000000030020003b0100003f000000000000000a0000002331000000000000730300000000000000000000000000000000000001002c000100140033000001440a0807be005e019b0088002200220001005b040001252524240000000000000000770d5b0d478e0000365335384549393133414332393736533538454939313341433239373653353846493731324143333533000000000000000000000000000000000000000000000000000000000101040d0201030600008ae3030332e30317b00000000007c006d0000000000b533',
    'hex'
);
/*
 * ez`     SYSGQEJMDSH34A10I8219546X|      B       _
 *    RT@> R
 *
 *
 * u V2     ;?`
 * #1s,3D
 * G6S58EI913AC2976S58EI913AC2976S58FI712AC353
 */

console.log(data.toString('ascii'));
console.log('----');
const regNum = data.slice(8, 18).toString();
const sn = data.slice(18, 40).toString();

const after = data.slice(40, 44);
// console.log(dec2bin(data[17]));
console.log(sn);
console.log(after.toString('hex'));

console.log('len', data.length);
console.log(data.slice(600, -1).toString());
function dec2bin(dec: number) {
    return (dec >>> 0).toString(2);
}
const possible = Buffer.from(
    '0000020158027c0942095f090d000d000d00650081007a006001830bd21054004000be09d20a8b1387138713020000000000000000000000000000000000000000000000000000000000000000000000000000008a614e075612b209bc003a1201002c00600100010e010d04021764000000200000000000000000000000000000000000000000000000000000000d0100001f000200000000007500000089000000030020003b0100003f000000000000000a0000002331000000000000730300000000000000000000000000000000000001002c000100140033000001440a0807be005e019b0088002200220001005b040001252524240000000000000000770d5b0d478e0000365335384549393133414332393736533538454939313341433239373653353846493731324143333533000000000000000000000000000000000000000000000000000000000101040d0201030600008a61000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    'hex'
);
const shorts = new Int16Array(possible);

console.log(shorts.filter((n) => n > 200));
